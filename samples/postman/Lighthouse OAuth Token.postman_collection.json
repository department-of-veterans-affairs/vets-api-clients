{
	"info": {
		"_postman_id": "d6997e2b-9ab5-4fb8-a2b2-ceb26ca2d727",
		"name": "Lighthouse OAuth Token",
		"description": "# Postman Client Credentials Grant (CCG) OAuth Token Request\n\n## Description\n\nThis Postman collection contains pre-script request methods to generate a signed JSON Web Token (JWT) and use it as a client assertion to request access tokens from VA APIs with the Client Credentials Grant (CCG) OAuth flow.\n\n- To retrieve a sandbox token, configure the collection variables and run the token request as shown below.\n- For information on signing up for sandbox access for a VA API, and if an API uses CCG for authorization, check its documentation pages on the [VA developer portal](https://developer.va.gov/explore).\n    \n\n## Configuration\n\n1. Import `Lighthouse OAuth Token.postman_collection.json` into your Postman workspace.\n2. Select the **Lighthouse OAuth Token** collection, in the left column of the Postman window.\n3. Select the **Variables** tab.\n4. Configure the 4 variables shown below by pasting them into the **Initial Value** and **Current Value** columns in Postman:\n    - `aud`: The URL that will recieve your token.\n        - To find this value, check the CCG documentation for the VA API you are working with.\n        - Example (from Patient Health API): `https://deptva-eval.okta.com/oauth2/aus8nm1q0f7VQ0a482p7/v1/token`\n    - `token_endpoint`: The URL you will request a token from.\n        - To find this value, check the CCG documentation for the VA API you are working with.\n        - Example (from Patient Health API): `https://sandbox-api.va.gov/oauth2/health/system/v1/token`\n    - `clientId`: The Client ID you recieved when you signed up for sandbox access.\n        - For information on signing up for sandbox access, check the documentation for the API you are working with in the [VA developer portal](https://developer.va.gov/explore).\n    - `privatePem`: The private RSA key you generated when signing up for sandbox access, in PEM format.\n        - Your private RSA key should begin with `-----BEGIN RSA PRIVATE KEY-----` and end with `-----END RSA PRIVATE KEY-----`.\n        - For information on generating your RSA keys, check the CCG documentation for the API you are working with in the [VA developer portal](https://developer.va.gov/explore).\n5. Do **not** edit the `client_assertion` and `import_do_not_edit` values. These will be pre-populated once the previous values are defined.\n6. Now you're ready to request a token. Select **POST Client Credentials Example**, under **Lighthouse OAuth Token** in the left column of the Postman window.\n    - You should see that the HTTP URL is the `{token_endpoint}` collection variable that you configured in step `4`, above.\n7. Select the **Body** tab.\n8. Configure the `scope` and `launch` values as follows:\n    - `scope`: The default value, \"launch,\" is only appropriate for some VA APIs. Check the CCG documentation for the API you are working with in the [VA developer portal](https://developer.va.gov/explore) for the scope(s) that may be included in your token request.\n    - `launch`: Follow the steps below to set or omit this value:\n        1. Check the CCG documentation for the API you are working with in the [VA developer portal](https://developer.va.gov/explore) to see if `launch` is required.\n        2. If `launch` **is** required for your API, enter the example value shown in the documentation. This should be a Base64-encoded value that looks similar to the default set in the Postman collection (`eyJwYXRpZW50IjoiMTAwMDcyMDEwMFYyNzEzODcifQ==`).\n        3. If `launch` **is not** required for your API, un-check `launch` in the list of body fields in Postman.\n9. Confirm that all other values are pre-populated, and that `x-www-form-urlencoded` is checked.\n    - The `grant_type` and `client_assertion_type` values should not change, as they define the token request as a CCG call. The `client_assertion` should also remain the same as it will be populated with the `{{client_assertion}}` collection variable.\n\n## Token request\n\nAfter configuring the Postman collection, you can generate a client assertion and request an OAuth token.\n\n1. Select **Lighthouse OAuth Token > POST Client Credentials Example** in the left column of the Postman window.\n2. Press the **Send** button, located near the top right of the Postman UI.\n3. If all values were configured correctly, you should recieve a JSON object similar to the following example, with an access token and associated metadata:\n    \n    ``` json\n      {\n       \"access_token\": \"eyJraWQiOiIzOWdBcjI4RkZNVVV...\",\n       \"token_type\": \"Bearer\",\n       \"scope\": \"system/MedicationOrder.read system/Organization.read system/Location.read system/Medication.read system/Observation.read launch system/Condition.read system/Appointment.read system/DiagnosticReport.read system/AllergyIntolerance.read system/Immunization.read system/Patient.read\",\n       \"expires_in\": 300,\n       \"state\": null,\n       \"patient\": \"1000720100V271387\"\n      }\n    \n     ```\n    \n4. You can also view your signed client assertion in the Postman console after making the request. It should look similar to the following example:\n    \n    ``` json\n      client_assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJodHRwczovL2R\n      lcHR2YS1ldmFsLm9rdGEuY29tL29hdXRoMi9hdXM4bm0xcTBmN1ZRMGE0ODJwNy92MS90b2tlbiIsI\n      mlzcyI6IjBvYXUxaWl1eDlUT0RqUU90MnA3Iiwic3ViIjoiMG9hdTFpaXV4OVRPRGpRT3QycDciLCJ\n      qdGkiOiJiZGFhOGIxNy04ZGVmLTRkOTctOTY3My0xNDlkNjc0NWRlNTAiLCJpYXQiOjE3MTIyNjI4N\n      TYsImV4cCI6MTcxMjI2MjkxNn0.ikWqX-sRIv5dT1Khs8PWvQ5dMAgUSB_CORB3SHSxWM92hz-QEXM\n      Z_V6NetnaNRyUvrma-PaQPBrYYs9yOUdP4BvbQgPb_PVjWcHF6QqJuE4UZx-LKNF2sFrrWD5iFqJ0p\n      1_e9arcv8VSkFaP-IEFJsi22UCffXhDDhawLYJjTBtK0dxZnX1Om_nlortLOfJsKUCnWdyUBS4EKbh\n      7_ec6ZbP9MrwbO_ssnSMoQfONCwfkH1UdWj-NW41Vb5McNvvW2itwfUU6pD-xRSYQWwm0F0hKlG32C\n      3PExTfM1xn1uhQBWOURBZ-RhKzx6LaqSHmuaV0BTkwbPTM4GggJcyX06A\n    \n     ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17161995"
	},
	"item": [
		{
			"name": "Client Credentials Example",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uuid = require('uuid')",
							"let kjur;",
							"",
							"const AUD = pm.collectionVariables.get(\"aud\");",
							"// This value is set at the collection > variables tab",
							"const CLIENT_ID = pm.collectionVariables.get(\"clientId\");",
							"// This value is set at the collection > variables tab",
							"const PRIVATE_PEM = pm.collectionVariables.get(\"privatePem\");",
							"",
							"const required = {",
							"    \"aud\": AUD, ",
							"    \"clientId\": CLIENT_ID, ",
							"    \"privatePem\": PRIVATE_PEM",
							"}",
							"for (const [key, value] of Object.entries(required)) {",
							"  if (!value) console.error(key + \" is required\");",
							"}",
							"",
							"function getAssertion() {",
							"    const secondsSinceEpoch = Math.round(Date.now() / 1000);",
							"    const header = {",
							"        alg: 'RS256',",
							"        typ: 'JWT'",
							"    }",
							"    const payload = {",
							"        \"aud\": AUD,",
							"        \"iss\": CLIENT_ID,",
							"        \"sub\": CLIENT_ID,",
							"        \"jti\": uuid.v4(),",
							"        \"iat\": secondsSinceEpoch,",
							"        \"exp\": secondsSinceEpoch + 60",
							"    }",
							"    const jwt = kjur.jws.JWS.sign(null, header, payload, PRIVATE_PEM);",
							"    pm.collectionVariables.set(\"client_assertion\", jwt);",
							"    console.info(\"client_assertion: \" + jwt);",
							"}",
							"",
							"function run() {",
							"    navigator = {}",
							"    window = {}",
							"    eval(pm.collectionVariables.get(\"import_do_not_edit\"));",
							"    kjur = KJUR;",
							"    getAssertion();",
							"}",
							"run();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"user-agent": true,
					"accept": true,
					"connection": true,
					"accept-encoding": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{client_assertion}}",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "launch",
							"type": "text"
						},
						{
							"key": "launch",
							"value": "eyJwYXRpZW50IjoiMTAwMDcyMDEwMFYyNzEzODcifQ==",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{token_endpoint}}",
					"host": [
						"{{token_endpoint}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.collectionVariables.has(\"import_do_not_edit\") || pm.collectionVariables.get(\"import_do_not_edit\").length <= 1000) {",
					"    pm.sendRequest(\"http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", (err, res) => {",
					"        pm.collectionVariables.set(\"import_do_not_edit\", res.text());",
					"    })",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "aud",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_endpoint",
			"value": "",
			"type": "string"
		},
		{
			"key": "clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "client_assertion",
			"value": ""
		},
		{
			"key": "import_do_not_edit",
			"value": ""
		}
	]
}